+-------------------------------------------------------------+
| Connector/ODBC                                              |
| UNIX Platforms                                              |
+-------------------------------------------------------------+

INTRODUCTION
---------------------------------------------------------------

In this document, we provide a general and brief explaination 
of how to build the MyODBC driver on UNIX platforms.

NOTE:	This information is fairly generic. You may find other
README files with more detailed information about building 
MyODBC with specific flavours of UNIX.
	
WHAT YOU NEED
---------------------------------------------------------------

UNIX
----

UNIX or a UNIX-like operating system such as;

- Solaris
- Linux
- OSX

ODBC
----

You need an ODBC SDK, and you probably want an ODBC Driver 
Manager. 

ODBC has not, traditionally, been a standard part of any UNIX 
or UNIX-like platform. This causes a number of vendors to 
provide ODBC solutions which can be added to UNIX. In theory 
this should not be a problem, but in practice this can cause 
compatability and portability issues.

Recently; Linux distributions have been including unixODBC as a
standard option, and Apple OSX now has ODBC by default.

We recommend, and use, unixODBC on all UNIX-like platforms
except OSX where we use the default ODBC.

See:
	http://www.unixodbc.org/

Compiler Tools
--------------

We try to build using the native compiler tool set for the 
target platform. For example, this is SunStudio on Solaris. But
the GNU tool-chain is a common compiler that works across all 
platforms.

Source Code
-----------

You can get the source code from the bzr source repository (for
'bleeding edge' code) or more commonly, simply download the zip
or tarball of the source.

Source:
  bzr branch lp:myodbc
  https://code.launchpad.net/~myodbc-developers

Downloads:
  http://dev.mysql.com/downloads/connector/odbc/

BUILD
---------------------------------------------------------------

cmake
-------------

CMake is the build system used to create configure files for your 
system. Instructions are as follows:

cd into the MyODBC source directory, then run cmake. For example:

 $ cd /path/to/myodbc/source
 $ cmake -G "Unix Makefiles" .

CMake will look for iODBC by default. Alternatively, if you are using
unixODBC instead of iODBC, then you'll need to pass in the appropriate
parameter, such as:

 $ cmake -G "Unix Makefiles" -DWITH_UNIXODBC=1

If the driver manager headers and/or libraries cannot be found, then you 
may specify their location by passing in these additional parameters:

 -DODBC_INCLUDES=/path/to/headers
 -DODBC_LIB_DIR=/path/to/libs

And you might need to help cmake find the MySQL headers and libraries, 
by setting the environment variable or additional parameters 
MYSQL_INCLUDE_DIR, MYSQL_LIB_DIR or MYSQL_DIR to the appropriate location. 
For example:

 $ export MYSQL_INCLUDE_DIR=/usr/local/mysql/include
 $ export MYSQL_LIB_DIR=/usr/local/mysql/lib
 $ export MYSQL_DIR=/usr/local/mysql
  
Mysql client library(libmysqlclient.a) is build statically with 
MyODBC. If you want to build dynamically or want to specify mysql client 
library name with which MyODBC should get linked, use MYSQLCLIENT_LIB_NAME 
additional parameter with mysqlclient library name.

 -DMYSQLCLIENT_LIB_NAME=mysqlclient lib name with extension
 
In MyODBC, mysql_config is used to find MYSQL_INCLUDE_DIR, MYSQL_LIB_DIR, 
MYSQL_LINK_FLAGS and MYSQL_CXXFLAGS each of which can be overriden if they 
are provided as additional parameters in cmake. mysql_config location can 
be specified using MYSQL_CONFIG_EXECUTABLE additional parameter.

 -DMYSQL_CONFIG_EXECUTABLE=/path/to/mysql_config
 -DMYSQL_LINK_FLAGS=mysql link flags
 -DMYSQL_CXXFLAGS=mysql C++ linkage flags
 
If you want to enable C++ linkage to mysql client library, then specify 
MYSQL_CXX_LINKAGE to true. By default, MYSQL_CXX_LINKAGE is enabled for 
mysql version greater then equal to 5.6.4
 -DMYSQL_CXX_LINKAGE=1

Upon success, CMake will create the appropriate make files. Then,
execute make:

 $ make

INSTALL
---------------------------------------------------------------

You probably want to be the root user, or use sudo, because installation
will probably require these extra privileges.  To install the MyODBC
library and tools, execute one of the following:

 $ sudo make install
 # make install

That will copy all of the MyODBC files to their appropriate locations. 

Next, you probably want to register the driver with the ODBC on your 
system. See your ODBC documentation for more about how to do this. 

For unixODBC, you could run ODBCConfig from a GUI as root, or use the 
odbcinst command line tool. You may also want to look at the 
myodbc-installer command-line tool for this.
